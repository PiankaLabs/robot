{"version":3,"sources":["wave.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["stream","buffer","length","bufferSize","startRecording","callback","settings","audio","navigator","mediaDevices","getUserMedia","createStream","then","mediaStream","AudioContext","createMediaStreamSource","mediaStreamAudioSource","channels","processor","context","createScriptProcessor","connect","destination","scriptProcessor","onaudioprocess","audioProcessingEvent","channel","data","Float32Array","inputBuffer","copyFromChannel","push","save","blob","recordRate","exportRate","encoded","samples","ArrayBuffer","view","DataView","i","s","Math","max","min","setInt16","encode","sampleRate","exportSampleRate","sampleRateRatio","newLength","round","result","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","downsample","offset","forEach","sample","set","mergeBuffer","Blob","samplesToBlob","createAudioEventProcessor","start","client","ws","onopen","arrayBuffer","array","send","streamMicrophone","video","document","getElementById","microphoneWaveform","audioWaveform","muteButton","src","play","style","visibility","labels","getElementsByClassName","item","joysticks","currentTime","hidden","toggleMute","muted","getTracks","t","kind","enabled","color","handleMove","event","axios","get","x","y","handleStop","App","className","id","onClick","href","size","move","stop","data-icon","data-inline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.09815b18.chunk.js","sourcesContent":["let buffer: Float32Array[] = []\nlet length: number = 0\n\nconst bufferSize = 4096\n\ntype RecordingCallback = (blob: Blob) => void\ntype StreamSourceCreator = (mediaStream: MediaStream) => MediaStreamAudioSourceNode\ntype ScriptProcessorCreator = (mediaStreamAudioSource: MediaStreamAudioSourceNode) => ScriptProcessorNode\ntype AudioEventProcessorCreator = (scriptProcessor: ScriptProcessorNode) => void\n\nexport let stream: MediaStream\n\nexport function startRecording(callback: RecordingCallback) {\n  createStream()\n    .then(createStreamSource())\n    .then(createScriptProcessor())\n    .then(createAudioEventProcessor(callback))\n}\n\nfunction createStream(): Promise<MediaStream> {\n  const settings = {\n    audio: true\n  }\n\n  // chrome only\n  return navigator.mediaDevices.getUserMedia(settings)\n}\n\nfunction createStreamSource(): StreamSourceCreator {\n  return (mediaStream: MediaStream) => {\n    stream = mediaStream\n    const context = new AudioContext()\n    return context.createMediaStreamSource(mediaStream)\n  }\n}\n\nfunction createScriptProcessor(): ScriptProcessorCreator {\n  return (mediaStreamAudioSource: MediaStreamAudioSourceNode) => {\n    const channels = 1\n    const processor = mediaStreamAudioSource.context.createScriptProcessor(bufferSize, channels, channels)\n\n    mediaStreamAudioSource.connect(processor)\n    processor.connect(mediaStreamAudioSource.context.destination)\n\n    return processor\n  }\n}\n\nfunction createAudioEventProcessor(callback: RecordingCallback): AudioEventProcessorCreator {\n  return (scriptProcessor: ScriptProcessorNode) => {\n    //TODO: refactor deprecated API\n    scriptProcessor.onaudioprocess = (audioProcessingEvent: AudioProcessingEvent) => {\n      const channel = 0\n      const data = new Float32Array(bufferSize)\n\n      // copy data out so as not to reuse underlying memory\n      // https://stackoverflow.com/questions/59252870/obtaining-microphone-pcm-data-from-getchanneldata-method-using-webaudio-api-does\n      audioProcessingEvent.inputBuffer.copyFromChannel(data, channel)\n\n      save(data)\n\n      if (length > 10 * 1000) {\n        const blob = samplesToBlob(buffer, length, scriptProcessor.context.sampleRate)\n\n        clear()\n        callback(blob)\n      }\n    }\n  }\n}\n\nfunction save(data: Float32Array) {\n  buffer.push(data)\n  length += data.length\n}\n\nfunction clear() {\n  buffer = []\n  length = 0\n}\n\nfunction samplesToBlob(buffer: Float32Array[], length: number, recordRate: number): Blob {\n  //records at 48000\n  const exportRate = 16000\n  const merged = mergeBuffer(buffer, length)\n  const sampled = downsample(merged, recordRate,exportRate)\n  const encoded = encode(sampled)\n\n  return new Blob([encoded])\n}\n\nfunction mergeBuffer(buffer: Float32Array[], length: number) {\n  const result = new Float32Array(length)\n  let offset = 0\n\n  buffer.forEach(sample => {\n    result.set(sample, offset)\n    offset += sample.length\n  })\n\n  return result\n}\n\nfunction downsample(buffer: Float32Array, sampleRate: number, exportSampleRate: number) {\n  if (exportSampleRate === sampleRate) {\n    return buffer\n  }\n\n  const sampleRateRatio = sampleRate / exportSampleRate\n  const newLength = Math.round(buffer.length / sampleRateRatio)\n  const result = new Float32Array(newLength)\n\n  let offsetResult = 0\n  let offsetBuffer = 0\n\n  while (offsetResult < result.length) {\n    const nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio)\n    let accum = 0, count = 0\n    for (let i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n      accum += buffer[i]\n      count++\n    }\n    result[offsetResult] = accum / count\n    offsetResult++\n    offsetBuffer = nextOffsetBuffer\n  }\n\n  return result\n}\n\nfunction encode(samples: Float32Array) {\n  const buffer = new ArrayBuffer(samples.length * 2)\n  const view = new DataView(buffer)\n\n  for (let i = 0; i < samples.length; i++) {\n    let s = Math.max(-1, Math.min(1, samples[i]))\n    view.setInt16(i * 2, s < 0 ? s * 0x8000 : s * 0x7FFF, true)\n  }\n\n  return view\n}","import React from 'react'\nimport './App.css'\nimport { Joystick } from 'react-joystick-component'\nimport { IJoystickUpdateEvent } from \"react-joystick-component/build/lib/Joystick\"\nimport axios from 'axios'\nimport { w3cwebsocket as ws } from \"websocket\"\nimport { startRecording, stream } from \"./wave\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div id=\"start\" className=\"Start\">\n        <a onClick={start} href=\"#\">&#x25b6;</a>\n      </div>\n      <div className=\"App-header\">\n        <img id=\"video\" className=\"Video\" />\n        <audio id=\"audio\" className=\"Audio\" />\n      </div>\n      <div className=\"Joystick\">\n        <Joystick size={100} move={handleMove} stop={handleStop} />\n      </div>\n      <div className=\"MicrophoneWaveform\">\n        <span className=\"WaveformLabel\"><span className=\"iconify\" data-icon=\"mdi:web\" data-inline=\"false\"></span> 48,000.0 Hz, 16 Bit, mono, 2 bytes/frame</span><br/>\n        <img id=\"microphoneWaveform\" />\n      </div>\n      <div className=\"AudioWaveform\">\n        <span className=\"WaveformLabel\"><span className=\"iconify\" data-icon=\"mdi-robot\" data-inline=\"false\"></span> 16,000.0 Hz, 16 Bit, stereo, 2 bytes/frame</span><br/>\n        <img id=\"audioWaveform\" />\n      </div>\n      <div id=\"muteButton\" className=\"MuteButton\" onClick={toggleMute}>\n        <span className=\"iconify\" data-icon=\"mdi:volume-mute\" data-inline=\"false\"></span>\n      </div>\n    </div>\n  )\n}\n\nfunction start() {\n  streamMicrophone()\n\n  let video = document.getElementById(\"video\") as HTMLImageElement\n  let audio = document.getElementById(\"audio\") as HTMLAudioElement\n\n  let microphoneWaveform = document.getElementById(\"microphoneWaveform\") as HTMLImageElement\n  let audioWaveform = document.getElementById(\"audioWaveform\") as HTMLImageElement\n\n  let muteButton = document.getElementById(\"muteButton\") as HTMLDivElement\n\n  video.src = \"/video\"\n  audio.src = \"/audio\"\n  audio.play()\n\n  microphoneWaveform.src = \"/microphone/waveform\"\n  microphoneWaveform.style.visibility = \"visible\"\n  audioWaveform.src = \"/audio/waveform\"\n  audioWaveform.style.visibility = \"visible\"\n\n  muteButton.style.visibility = \"visible\"\n\n  let labels = document.getElementsByClassName(\"WaveformLabel\")\n  for (let i = 0; i < labels.length; i++) {\n    // @ts-ignore\n    labels.item(i).style.visibility = \"visible\"\n  }\n\n  let joysticks = document.getElementsByClassName(\"Joystick\")\n  for (let i = 0; i < joysticks.length; i++) {\n    // @ts-ignore\n    joysticks.item(i).style.visibility = \"visible\"\n  }\n\n  audio.currentTime += 5\n\n  let start = document.getElementById(\"start\") as HTMLAnchorElement\n\n  start.hidden = true\n  audio.hidden = true\n\n  return false\n}\n\nfunction streamMicrophone() {\n  const client = new ws('wss://piankabot.lan:8443/microphone')\n  client.onopen = () => startRecording((blob: Blob) => blob.arrayBuffer().then((array) => client.send(array)))\n}\n\nfunction toggleMute() {\n  let muted = false\n\n  stream.getTracks().forEach((t) => {\n    if (t.kind === 'audio') t.enabled = !t.enabled\n    muted = !t.enabled\n  })\n\n  let muteButton = document.getElementById(\"muteButton\") as HTMLDivElement\n  muteButton.style.color = muted ? \"red\" : \"white\"\n}\n\nfunction handleMove(event: IJoystickUpdateEvent) {\n  axios.get(`/robot/${event.x}/${event.y}`)\n}\n\nfunction handleStop(event: IJoystickUpdateEvent) {\n  axios.get(\"/robot/0/0\")\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}